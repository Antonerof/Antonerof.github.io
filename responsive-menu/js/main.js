"use strict";!function(e,t){function i(e){this.container=e,this.init()}var n,m,c,s=null,o=1920,a=1080,u=140,r=103;i.prototype.init=function(){function i(){var t=e(".menuItem__title"),i=e(".menu__item--active .menuItem__title"),m=e(".menuItem__item"),c=e(".menu__container"),s=e(".menuItem__img");n={itemTitle:{marginTop:t.css("margin-top"),fontSize:t.css("font-size")},itemTitleActive:{marginTop:i.css("margin-top"),fontSize:i.css("font-size")},menuItem:{fontSize:m.css("font-size")},logo:{backgroundSize:c.css("background-size")},dotted_circle:{backgroundSize:e(".dotted_circle").css("background-size")},ball:{backgroundSize:s.css("background-size"),width:s.css("width"),shadow:"25"}}}var m=this;e(t).resize(function(){m.refresh()}),i(),this.refresh()},i.prototype.refresh=function(){function i(){s(),f(),g(),_(),h(),l(),p(),d()}function s(){var i,n=e(t).height();console.log(n),i=n>800?n/3+"px":800/3+"px",e(".menu__item").css("height",i),c=e(".menu").height()/a,m=Math.min(m,c)}function _(){var t,i;e(".menuItem__title").each(function(){t=parseInt(n.itemTitle.marginTop)*c+"px",i=parseInt(n.itemTitle.fontSize)*m+"px",e(this).css({"margin-top":t,"font-size":i})})}function l(){var t;e(".menuItem__item").each(function(){t=parseInt(n.menuItem.fontSize)*m+"px",e(this).css({"font-size":t})})}function h(){var t,i;t=parseInt(n.itemTitleActive.marginTop)*c+"px",i=parseInt(n.itemTitleActive.fontSize)*m+"px",e(".menu__item--active .menuItem__title").css({"margin-top":t,"font-size":i})}function g(){for(var t=e(".menu__item--active .menuItem__item"),i=t.length,n=0,c=0,s=0,o=0,a=0,r=u*m,_=e(".menu__item--active").width()/2,l=e(".menu__item--active").height()/2,h=0;h<t.length;h++)n=2/i*(h+3)*Math.PI,c=r*Math.sin(n)+_,s=l+r*Math.cos(n),c<=_-50&&(c-=e(t[h]).width()),c>_-50&&c<_+50&&(c=-e(t[h]).width()/2+c),a=100*c/(2*_)+"%",o=100*s/(2*l)+"%",e(t[h]).css({top:o,left:a}),e(t[h]).css({top:s,left:c})}function f(){for(var t=e(".menu__item--active .menuItem__circle"),i=t.length,n=0,c=0,s=0,o=0,a=0,u=r*m,_=e(".menu__item--active").width()/2,l=e(".menu__item--active").height()/2,h=0;h<t.length;h++)n=2/i*h*Math.PI,c=_+u*Math.sin(n)-e(t[h]).width()/2,s=l+u*Math.cos(n)-e(t[h]).height()/2,a=100*c/(2*_)+"%",o=100*s/(2*l)+"%",e(t[h]).css({top:o,left:a})}function p(){for(var t=[e(".menuItem__circle")],i=0;i<t.length;i++)t[i].css("background-size",100*m+"%")}function d(){var t=parseInt(n.ball.width)*m;"transform"in document.createElement("div").style&&(e(".menuItem__img").css({"background-image":'url("../img/ball.png")'}),e(".menu__item--active .menuItem__img").css({"background-image":'url("../img/ball_light.png")'})),e(".menuItem__img").css({width:t+"px",height:t+"px","margin-top":-t/2+"px","margin-left":-t/2+"px"})}m=e(".menu").width()/o,m=m<.8?1.2*m:m,i(),console.log(c),console.log(m),e(".menuItem__img").click("click",function(){e(".menu__item").removeClass("menu__item--active"),e(this).parent().parent().addClass("menu__item--active"),i()}),e(".menuItem__img").bind("click",function(){e(".menu__item").removeClass("menu__item--active"),e(this).parent().parent().addClass("menu__item--active"),i()})},e.fn.circleMenu=function(){s=new i(this)}}(jQuery,window);
//# sourceMappingURL=data:application/json;base64,
