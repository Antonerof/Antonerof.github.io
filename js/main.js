function call(){var e=$("#sendRequest").serialize();$.ajax({type:"GET",url:"http://profilerest/get_message",data:e,error:function(e,t){alert("Возникла ошибка: "+e.responseCode)}})}function setActiveClassMenu(e){$(".menu__list").children().removeClass("active"),$("."+e).parent().addClass("active")}!function(e,t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],function(n){return t(n,e,e.document,e.Math)}):"undefined"!=typeof exports?module.exports=t(require("jquery"),e,e.document,e.Math):t(jQuery,e,e.document,e.Math)}("undefined"!=typeof window?window:this,function(e,t,n,i,s){"use strict";var r="fullpage-wrapper",o="."+r,a="fp-scrollable",l="."+a,c="fp-responsive",d="fp-notransition",u="fp-destroyed",h="fp-enabled",f="fp-viewing",p="active",m="."+p,g="fp-completely",v="."+g,b=".section",y="fp-section",w="."+y,S=w+m,x=w+":first",C=w+":last",T="fp-tableCell",k="."+T,L="fp-auto-height",A="fp-normal-scroll",E="fp-nav",R="#"+E,M="fp-tooltip",I="."+M,q="fp-show-active",B=".slide",H="fp-slide",z="."+H,F=z+m,O="fp-slides",P="."+O,N="fp-slidesContainer",D="."+N,j="fp-table",V="fp-slidesNav",$="."+V,U=$+" a",W="fp-controlArrow",_="."+W,Y="fp-prev",X="."+Y,Z=W+" "+Y,K=_+X,G="fp-next",Q="."+G,J=W+" "+G,ee=_+Q,te=e(t),ne=e(n),ie={scrollbars:!0,mouseWheel:!0,hideScrollbars:!1,fadeScrollbars:!1,disableMouse:!0};e.fn.fullpage=function(a){function l(){a.css3&&(a.css3=wt()),a.scrollBar=a.scrollBar||a.hybrid,X(),G(),Nt.setAllowScrolling(!0),Nt.setAutoScrolling(a.autoScrolling,"internal");var t=e(S).find(F);t.length&&(0!==e(S).index(w)||0===e(S).index(w)&&0!==t.index())&&Rt(t),Je(),yt(),"complete"===n.readyState&&Pe(),te.on("load",Pe)}function W(){te.on("scroll",me).on("hashchange",Ne).blur(_e).resize(Qe),ne.keydown(De).keyup(Ve).on("click touchstart",R+" a",Ye).on("click touchstart",U,Xe).on("click",I,je),e(w).on("click touchstart",_,We),a.normalScrollElements&&(ne.on("mouseenter",a.normalScrollElements,function(){Nt.setMouseWheelScrolling(!1)}),ne.on("mouseleave",a.normalScrollElements,function(){Nt.setMouseWheelScrolling(!0)}))}function X(){var t=_t.find(a.sectionSelector);a.anchors.length||(a.anchors=t.filter("[data-anchor]").map(function(){return e(this).data("anchor").toString()}).get()),a.navigationTooltips.length||(a.navigationTooltips=t.filter("[data-tooltip]").map(function(){return e(this).data("tooltip").toString()}).get())}function G(){_t.css({height:"100%",position:"relative"}),_t.addClass(r),e("html").addClass(h),Yt=te.height(),_t.removeClass(u),ae(),e(w).each(function(t){var n=e(this),i=n.find(z),s=i.length;re(n,t),oe(n,t),s>0?Q(n,i,s):a.verticalCentered&&lt(n)}),a.fixedElements&&a.css3&&e(a.fixedElements).appendTo(Pt),a.navigation&&ce(),ue(),he(),a.scrollOverflow?("complete"===n.readyState&&de(),te.on("load",de)):pe()}function Q(t,n,i){var s=100*i,r=100/i;n.wrapAll('<div class="'+N+'" />'),n.parent().wrap('<div class="'+O+'" />'),t.find(D).css("width",s+"%"),i>1&&(a.controlArrows&&le(t),a.slidesNavigation&&mt(t,i)),n.each(function(t){e(this).css("width",r+"%"),a.verticalCentered&&lt(e(this))});var o=t.find(F);o.length&&(0!==e(S).index(w)||0===e(S).index(w)&&0!==o.index())?Rt(o):n.eq(0).addClass(p)}function re(t,n){n||0!==e(S).length||t.addClass(p),t.css("height",Yt+"px"),a.paddingTop&&t.css("padding-top",a.paddingTop),a.paddingBottom&&t.css("padding-bottom",a.paddingBottom),"undefined"!=typeof a.sectionsColor[n]&&t.css("background-color",a.sectionsColor[n]),"undefined"!=typeof a.anchors[n]&&t.attr("data-anchor",a.anchors[n])}function oe(t,n){"undefined"!=typeof a.anchors[n]&&t.hasClass(p)&&st(a.anchors[n],n),a.menu&&a.css3&&e(a.menu).closest(o).length&&e(a.menu).appendTo(Pt)}function ae(){_t.find(a.sectionSelector).each(function(){e(this).addClass(y)}),_t.find(a.slideSelector).each(function(){e(this).addClass(H)})}function le(e){e.find(P).after('<div class="'+Z+'"></div><div class="'+J+'"></div>'),"#fff"!=a.controlArrowColor&&(e.find(ee).css("border-color","transparent transparent transparent "+a.controlArrowColor),e.find(K).css("border-color","transparent "+a.controlArrowColor+" transparent transparent")),a.loopHorizontal||e.find(K).hide()}function ce(){Pt.append('<div id="'+E+'"><ul></ul></div>');var t=e(R);t.addClass(function(){return a.showActiveTooltip?q+" "+a.navigationPosition:a.navigationPosition});for(var n=0;n<e(w).length;n++){var i="";a.anchors.length&&(i=a.anchors[n]);var s='<li><a href="#'+i+'"><span></span></a>',r=a.navigationTooltips[n];"undefined"!=typeof r&&""!==r&&(s+='<div class="'+M+" "+a.navigationPosition+'">'+r+"</div>"),s+="</li>",t.find("ul").append(s)}e(R).css("margin-top","-"+e(R).height()/2+"px"),e(R).find("li").eq(e(S).index(w)).find("a").addClass(p)}function de(){e(w).each(function(){var t=e(this).find(z);t.length?t.each(function(){at(e(this))}):at(e(this))}),pe()}function ue(){_t.find('iframe[src*="youtube.com/embed/"]').each(function(){var t=fe(e(this).attr("src"));e(this).attr("src",e(this).attr("src")+t+"enablejsapi=1")})}function he(){_t.find('iframe[src*="player.vimeo.com/"]').each(function(){var t=fe(e(this).attr("src"));e(this).attr("src",e(this).attr("src")+t+"api=1")})}function fe(e){return/\?/.test(e)?"&":"?"}function pe(){var t=e(S);t.addClass(g),a.scrollOverflowHandler.afterRender&&a.scrollOverflowHandler.afterRender(t),He(t),ze(t),e.isFunction(a.afterLoad)&&a.afterLoad.call(t,t.data("anchor"),t.index(w)+1),e.isFunction(a.afterRender)&&a.afterRender.call(_t)}function me(){var t;if(!a.autoScrolling||a.scrollBar){var i=te.scrollTop(),s=ve(i),r=0,o=i+te.height()/2,l=Pt.height()-te.height()===i,c=n.querySelectorAll(w);if(l)r=c.length-1;else for(var d=0;d<c.length;++d){var u=c[d];u.offsetTop<=o&&(r=d)}if(ge(s)&&(e(S).hasClass(g)||e(S).addClass(g).siblings().removeClass(g)),t=e(c).eq(r),!t.hasClass(p)){an=!0;var h=e(S),f=h.index(w)+1,m=rt(t),v=t.data("anchor"),b=t.index(w)+1,y=t.find(F);if(y.length)var x=y.data("anchor"),C=y.index();Kt&&(t.addClass(p).siblings().removeClass(p),e.isFunction(a.onLeave)&&a.onLeave.call(h,f,b,m),e.isFunction(a.afterLoad)&&a.afterLoad.call(t,v,b),Fe(h),He(t),ze(t),st(v,b-1),a.anchors.length&&(Dt=v,gt(C,x,v,b))),clearTimeout(nn),nn=setTimeout(function(){an=!1},100)}a.fitToSection&&(clearTimeout(sn),sn=setTimeout(function(){Kt&&a.fitToSection&&(e(S).is(t)&&(Xt=!0),Ee(e(S)),Xt=!1)},a.fitToSectionDelay))}}function ge(t){var n=e(S).position().top,i=n+te.height();return"up"==t?i>=te.scrollTop()+te.height():n<=te.scrollTop()}function ve(e){var t=e>ln?"down":"up";return ln=e,pn=e,t}function be(e,t){if(Qt.m[e]){var n,i;if("down"==e?(n="bottom",i=Nt.moveSectionDown):(n="top",i=Nt.moveSectionUp),t.length>0){if(!a.scrollOverflowHandler.isScrolled(n,t))return!0;i()}else i()}}function ye(t){var n=t.originalEvent;if(!we(t.target)&&Se(n)){a.autoScrolling&&t.preventDefault();var s=e(S),r=a.scrollOverflowHandler.scrollable(s);if(Kt&&!$t){var o=Et(n);un=o.y,hn=o.x,s.find(P).length&&i.abs(dn-hn)>i.abs(cn-un)?i.abs(dn-hn)>te.outerWidth()/100*a.touchSensitivity&&(dn>hn?Qt.m.right&&Nt.moveSlideRight():Qt.m.left&&Nt.moveSlideLeft()):a.autoScrolling&&i.abs(cn-un)>te.height()/100*a.touchSensitivity&&(cn>un?be("down",r):un>cn&&be("up",r))}}}function we(t,n){n=n||0;var i=e(t).parent();return!!(n<a.normalScrollElementTouchThreshold&&i.is(a.normalScrollElements))||n!=a.normalScrollElementTouchThreshold&&we(i,++n)}function Se(e){return"undefined"==typeof e.pointerType||"mouse"!=e.pointerType}function xe(e){var t=e.originalEvent;if(a.fitToSection&&Ot.stop(),Se(t)){var n=Et(t);cn=n.y,dn=n.x}}function Ce(e,t){for(var n=0,s=e.slice(i.max(e.length-t,1)),r=0;r<s.length;r++)n+=s[r];return i.ceil(n/t)}function Te(n){var s=(new Date).getTime(),r=e(v).hasClass(A);if(a.autoScrolling&&!Vt&&!r){n=n||t.event;var o=n.wheelDelta||-n.deltaY||-n.detail,l=i.max(-1,i.min(1,o)),c="undefined"!=typeof n.wheelDeltaX||"undefined"!=typeof n.deltaX,d=i.abs(n.wheelDeltaX)<i.abs(n.wheelDelta)||i.abs(n.deltaX)<i.abs(n.deltaY)||!c;Gt.length>149&&Gt.shift(),Gt.push(i.abs(o)),a.scrollBar&&(n.preventDefault?n.preventDefault():n.returnValue=!1);var u=e(S),h=a.scrollOverflowHandler.scrollable(u),f=s-fn;if(fn=s,f>200&&(Gt=[]),Kt){var p=Ce(Gt,10),m=Ce(Gt,70),g=p>=m;g&&d&&(l<0?be("down",h):be("up",h))}return!1}a.fitToSection&&Ot.stop()}function ke(t,n){var i="undefined"==typeof n?e(S):n,s=i.find(P),r=s.find(z).length;if(!(!s.length||$t||r<2)){var o=s.find(F),l=null;if(l="prev"===t?o.prev(z):o.next(z),!l.length){if(!a.loopHorizontal)return;l="prev"===t?o.siblings(":last"):o.siblings(":first")}$t=!0,Ge(s,l)}}function Le(){e(F).each(function(){Rt(e(this),"internal")})}function Ae(e){var t=e.position(),n=t.top,i=t.top>pn,s=n-Yt+e.outerHeight(),r=a.bigSectionsDestination;return e.outerHeight()>Yt?(i||r)&&"bottom"!==r||(n=s):(i||Xt&&e.is(":last-child"))&&(n=s),pn=n,n}function Ee(t,n,i){if("undefined"!=typeof t){var s=Ae(t),r={element:t,callback:n,isMovementUp:i,dtop:s,yMovement:rt(t),anchorLink:t.data("anchor"),sectionIndex:t.index(w),activeSlide:t.find(F),activeSection:e(S),leavingSection:e(S).index(w)+1,localIsResizing:Xt};if(!(r.activeSection.is(t)&&!Xt||a.scrollBar&&te.scrollTop()===r.dtop&&!t.hasClass(L))){if(r.activeSlide.length)var o=r.activeSlide.data("anchor"),l=r.activeSlide.index();a.autoScrolling&&a.continuousVertical&&"undefined"!=typeof r.isMovementUp&&(!r.isMovementUp&&"up"==r.yMovement||r.isMovementUp&&"down"==r.yMovement)&&(r=Ie(r)),e.isFunction(a.onLeave)&&!r.localIsResizing&&a.onLeave.call(r.activeSection,r.leavingSection,r.sectionIndex+1,r.yMovement)===!1||(Fe(r.activeSection),t.addClass(p).siblings().removeClass(p),He(t),a.scrollOverflowHandler.onLeave(),Kt=!1,gt(l,o,r.anchorLink,r.sectionIndex),Re(r),Dt=r.anchorLink,st(r.anchorLink,r.sectionIndex))}}}function Re(t){if(a.css3&&a.autoScrolling&&!a.scrollBar){var n="translate3d(0px, -"+t.dtop+"px, 0px)";dt(n,!0),a.scrollingSpeed?en=setTimeout(function(){Be(t)},a.scrollingSpeed):Be(t)}else{var i=Me(t);e(i.element).animate(i.options,a.scrollingSpeed,a.easing).promise().done(function(){a.scrollBar?setTimeout(function(){Be(t)},30):Be(t)})}}function Me(e){var t={};return a.autoScrolling&&!a.scrollBar?(t.options={top:-e.dtop},t.element=o):(t.options={scrollTop:e.dtop},t.element="html, body"),t}function Ie(t){return t.isMovementUp?e(S).before(t.activeSection.nextAll(w)):e(S).after(t.activeSection.prevAll(w).get().reverse()),Mt(e(S).position().top),Le(),t.wrapAroundElements=t.activeSection,t.dtop=t.element.position().top,t.yMovement=rt(t.element),t}function qe(t){t.wrapAroundElements&&t.wrapAroundElements.length&&(t.isMovementUp?e(x).before(t.wrapAroundElements):e(C).after(t.wrapAroundElements),Mt(e(S).position().top),Le())}function Be(t){qe(t),e.isFunction(a.afterLoad)&&!t.localIsResizing&&a.afterLoad.call(t.element,t.anchorLink,t.sectionIndex+1),a.scrollOverflowHandler.afterLoad(),ze(t.element),t.element.addClass(g).siblings().removeClass(g),Kt=!0,e.isFunction(t.callback)&&t.callback.call(this)}function He(t){var t=Oe(t);t.find("img[data-src], source[data-src], audio[data-src], iframe[data-src]").each(function(){e(this).attr("src",e(this).data("src")),e(this).removeAttr("data-src"),e(this).is("source")&&e(this).closest("video").get(0).load()})}function ze(t){var t=Oe(t);t.find("video, audio").each(function(){var t=e(this).get(0);t.hasAttribute("data-autoplay")&&"function"==typeof t.play&&t.play()}),t.find('iframe[src*="youtube.com/embed/"]').each(function(){var t=e(this).get(0);/youtube\.com\/embed\//.test(e(this).attr("src"))&&t.hasAttribute("data-autoplay")&&t.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}',"*")})}function Fe(t){var t=Oe(t);t.find("video, audio").each(function(){var t=e(this).get(0);t.hasAttribute("data-keepplaying")||"function"!=typeof t.pause||t.pause()}),t.find('iframe[src*="youtube.com/embed/"]').each(function(){var t=e(this).get(0);/youtube\.com\/embed\//.test(e(this).attr("src"))&&!t.hasAttribute("data-keepplaying")&&e(this).get(0).contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}',"*")})}function Oe(t){var n=t.find(F);return n.length&&(t=e(n)),t}function Pe(){var e=t.location.hash.replace("#","").split("/"),n=decodeURIComponent(e[0]),i=decodeURIComponent(e[1]);n&&(a.animateAnchor?ft(n,i):Nt.silentMoveTo(n,i))}function Ne(){if(!an&&!a.lockAnchors){var e=t.location.hash.replace("#","").split("/"),n=decodeURIComponent(e[0]),i=decodeURIComponent(e[1]),s="undefined"==typeof Dt,r="undefined"==typeof Dt&&"undefined"==typeof i&&!$t;n.length&&(n&&n!==Dt&&!s||r||!$t&&jt!=i)&&ft(n,i)}}function De(t){clearTimeout(rn);var n=e(":focus");if(!n.is("textarea")&&!n.is("input")&&!n.is("select")&&"true"!==n.attr("contentEditable")&&""!==n.attr("contentEditable")&&a.keyboardScrolling&&a.autoScrolling){var i=t.which,s=[40,38,32,33,34];e.inArray(i,s)>-1&&t.preventDefault(),Vt=t.ctrlKey,rn=setTimeout(function(){Ze(t)},150)}}function je(){e(this).prev().trigger("click")}function Ve(e){Zt&&(Vt=e.ctrlKey)}function $e(e){2==e.which&&(mn=e.pageY,_t.on("mousemove",Ke))}function Ue(e){2==e.which&&_t.off("mousemove")}function We(){var t=e(this).closest(w);e(this).hasClass(Y)?Qt.m.left&&Nt.moveSlideLeft(t):Qt.m.right&&Nt.moveSlideRight(t)}function _e(){Zt=!1,Vt=!1}function Ye(t){t.preventDefault();var n=e(this).parent().index();Ee(e(w).eq(n))}function Xe(t){t.preventDefault();var n=e(this).closest(w).find(P),i=n.find(z).eq(e(this).closest("li").index());Ge(n,i)}function Ze(t){var n=t.shiftKey;switch(t.which){case 38:case 33:Qt.k.up&&Nt.moveSectionUp();break;case 32:if(n&&Qt.k.up){Nt.moveSectionUp();break}case 40:case 34:Qt.k.down&&Nt.moveSectionDown();break;case 36:Qt.k.up&&Nt.moveTo(1);break;case 35:Qt.k.down&&Nt.moveTo(e(w).length);break;case 37:Qt.k.left&&Nt.moveSlideLeft();break;case 39:Qt.k.right&&Nt.moveSlideRight();break;default:return}}function Ke(e){Kt&&(e.pageY<mn&&Qt.m.up?Nt.moveSectionUp():e.pageY>mn&&Qt.m.down&&Nt.moveSectionDown()),mn=e.pageY}function Ge(t,n){var s=n.position(),r=n.index(),o=t.closest(w),l=o.index(w),c=o.data("anchor"),d=o.find($),u=bt(n),h=o.find(F),f=Xt;if(a.onSlideLeave){var g=h.index(),v=ot(g,r);if(!f&&"none"!==v&&e.isFunction(a.onSlideLeave)&&a.onSlideLeave.call(h,c,l+1,g,v,r)===!1)return void($t=!1)}Fe(h),n.addClass(p).siblings().removeClass(p),f||He(n),!a.loopHorizontal&&a.controlArrows&&(o.find(K).toggle(0!==r),o.find(ee).toggle(!n.is(":last-child"))),o.hasClass(p)&&gt(r,u,c,l);var b=function(){f||e.isFunction(a.afterSlideLoad)&&a.afterSlideLoad.call(n,c,l+1,u,r),ze(n),$t=!1};if(a.css3){var y="translate3d(-"+i.round(s.left)+"px, 0px, 0px)";et(t.find(D),a.scrollingSpeed>0).css(It(y)),tn=setTimeout(function(){b()},a.scrollingSpeed,a.easing)}else t.animate({scrollLeft:i.round(s.left)},a.scrollingSpeed,a.easing,function(){b()});d.find(m).removeClass(p),d.find("li").eq(r).find("a").addClass(p)}function Qe(){if(Je(),Ut){var t=e(n.activeElement);if(!t.is("textarea")&&!t.is("input")&&!t.is("select")){var s=te.height();i.abs(s-gn)>20*i.max(gn,s)/100&&(Nt.reBuild(!0),gn=s)}}else clearTimeout(Jt),Jt=setTimeout(function(){Nt.reBuild(!0)},350)}function Je(){var e=a.responsive||a.responsiveWidth,t=a.responsiveHeight,n=e&&te.outerWidth()<e,i=t&&te.height()<t;e&&t?Nt.setResponsive(n||i):e?Nt.setResponsive(n):t&&Nt.setResponsive(i)}function et(e){var t="all "+a.scrollingSpeed+"ms "+a.easingcss3;return e.removeClass(d),e.css({"-webkit-transition":t,transition:t})}function tt(e){return e.addClass(d)}function nt(t,n){a.navigation&&(e(R).find(m).removeClass(p),t?e(R).find('a[href="#'+t+'"]').addClass(p):e(R).find("li").eq(n).find("a").addClass(p))}function it(t){a.menu&&(e(a.menu).find(m).removeClass(p),e(a.menu).find('[data-menuanchor="'+t+'"]').addClass(p))}function st(e,t){it(e),nt(e,t)}function rt(t){var n=e(S).index(w),i=t.index(w);return n==i?"none":n>i?"up":"down"}function ot(e,t){return e==t?"none":e>t?"left":"right"}function at(e){if(!e.hasClass("fp-noscroll")){e.css("overflow","hidden");var t,n=a.scrollOverflowHandler,i=n.wrapContent(),s=e.closest(w),r=n.scrollable(e);r.length?t=n.scrollHeight(e):(t=e.get(0).scrollHeight,a.verticalCentered&&(t=e.find(k).get(0).scrollHeight));var o=Yt-parseInt(s.css("padding-bottom"))-parseInt(s.css("padding-top"));t>o?r.length?n.update(e,o):(a.verticalCentered?e.find(k).wrapInner(i):e.wrapInner(i),n.create(e,o)):n.remove(e),e.css("overflow","")}}function lt(e){e.addClass(j).wrapInner('<div class="'+T+'" style="height:'+ct(e)+'px;" />')}function ct(e){var t=Yt;if(a.paddingTop||a.paddingBottom){var n=e;n.hasClass(y)||(n=e.closest(w));var i=parseInt(n.css("padding-top"))+parseInt(n.css("padding-bottom"));t=Yt-i}return t}function dt(e,t){t?et(_t):tt(_t),_t.css(It(e)),setTimeout(function(){_t.removeClass(d)},10)}function ut(t){var n=_t.find(w+'[data-anchor="'+t+'"]');return n.length||(n=e(w).eq(t-1)),n}function ht(e,t){var n=t.find(P),i=n.find(z+'[data-anchor="'+e+'"]');return i.length||(i=n.find(z).eq(e)),i}function ft(e,t){var n=ut(e);"undefined"==typeof t&&(t=0),e===Dt||n.hasClass(p)?pt(n,t):Ee(n,function(){pt(n,t)})}function pt(e,t){if("undefined"!=typeof t){var n=e.find(P),i=ht(t,e);i.length&&Ge(n,i)}}function mt(e,t){e.append('<div class="'+V+'"><ul></ul></div>');var n=e.find($);n.addClass(a.slidesNavPosition);for(var i=0;i<t;i++)n.find("ul").append('<li><a href="#"><span></span></a></li>');n.css("margin-left","-"+n.width()/2+"px"),n.find("li").first().find("a").addClass(p)}function gt(e,t,n,i){var s="";a.anchors.length&&!a.lockAnchors&&(e?("undefined"!=typeof n&&(s=n),"undefined"==typeof t&&(t=e),jt=t,vt(s+"/"+t)):"undefined"!=typeof e?(jt=t,vt(n)):vt(n)),yt()}function vt(e){if(a.recordHistory)location.hash=e;else if(Ut||Wt)t.history.replaceState(s,s,"#"+e);else{var n=t.location.href.split("#")[0];t.location.replace(n+"#"+e)}}function bt(e){var t=e.data("anchor"),n=e.index();return"undefined"==typeof t&&(t=n),t}function yt(){var t=e(S),n=t.find(F),i=bt(t),s=bt(n),r=String(i);n.length&&(r=r+"-"+s),r=r.replace("/","-").replace("#","");var o=new RegExp("\\b\\s?"+f+"-[^\\s]+\\b","g");Pt[0].className=Pt[0].className.replace(o,""),Pt.addClass(f+"-"+r)}function wt(){var e,i=n.createElement("p"),r={webkitTransform:"-webkit-transform",OTransform:"-o-transform",msTransform:"-ms-transform",MozTransform:"-moz-transform",transform:"transform"};n.body.insertBefore(i,null);for(var o in r)i.style[o]!==s&&(i.style[o]="translate3d(1px,1px,1px)",e=t.getComputedStyle(i).getPropertyValue(r[o]));return n.body.removeChild(i),e!==s&&e.length>0&&"none"!==e}function St(){n.addEventListener?(n.removeEventListener("mousewheel",Te,!1),n.removeEventListener("wheel",Te,!1),n.removeEventListener("MozMousePixelScroll",Te,!1)):n.detachEvent("onmousewheel",Te)}function xt(){var e,i="";t.addEventListener?e="addEventListener":(e="attachEvent",i="on");var r="onwheel"in n.createElement("div")?"wheel":n.onmousewheel!==s?"mousewheel":"DOMMouseScroll";"DOMMouseScroll"==r?n[e](i+"MozMousePixelScroll",Te,!1):n[e](i+r,Te,!1)}function Ct(){_t.on("mousedown",$e).on("mouseup",Ue)}function Tt(){_t.off("mousedown",$e).off("mouseup",Ue)}function kt(){if(Ut||Wt){var t=At();e(o).off("touchstart "+t.down).on("touchstart "+t.down,xe),e(o).off("touchmove "+t.move).on("touchmove "+t.move,ye)}}function Lt(){if(Ut||Wt){var t=At();e(o).off("touchstart "+t.down),e(o).off("touchmove "+t.move)}}function At(){var e;return e=t.PointerEvent?{down:"pointerdown",move:"pointermove"}:{down:"MSPointerDown",move:"MSPointerMove"}}function Et(e){var t=[];return t.y="undefined"!=typeof e.pageY&&(e.pageY||e.pageX)?e.pageY:e.touches[0].pageY,t.x="undefined"!=typeof e.pageX&&(e.pageY||e.pageX)?e.pageX:e.touches[0].pageX,Wt&&Se(e)&&a.scrollBar&&(t.y=e.touches[0].pageY,t.x=e.touches[0].pageX),t}function Rt(e,t){Nt.setScrollingSpeed(0,"internal"),"undefined"!=typeof t&&(Xt=!0),Ge(e.closest(P),e),"undefined"!=typeof t&&(Xt=!1),Nt.setScrollingSpeed(on.scrollingSpeed,"internal")}function Mt(e){if(a.scrollBar)_t.scrollTop(e);else if(a.css3){var t="translate3d(0px, -"+e+"px, 0px)";dt(t,!1)}else _t.css("top",-e)}function It(e){return{"-webkit-transform":e,"-moz-transform":e,"-ms-transform":e,transform:e}}function qt(e,t,n){switch(t){case"up":Qt[n].up=e;break;case"down":Qt[n].down=e;break;case"left":Qt[n].left=e;break;case"right":Qt[n].right=e;break;case"all":"m"==n?Nt.setAllowScrolling(e):Nt.setKeyboardScrolling(e)}}function Bt(){Mt(0),_t.find("img[data-src], source[data-src], audio[data-src], iframe[data-src]").each(function(){e(this).attr("src",e(this).data("src")),e(this).removeAttr("data-src")}),e(R+", "+$+", "+_).remove(),e(w).css({height:"","background-color":"",padding:""}),e(z).css({width:""}),_t.css({height:"",position:"","-ms-touch-action":"","touch-action":""}),Ot.css({overflow:"",height:""}),e("html").removeClass(h),Pt.removeClass(c),e.each(Pt.get(0).className.split(/\s+/),function(e,t){0===t.indexOf(f)&&Pt.removeClass(t)}),e(w+", "+z).each(function(){a.scrollOverflowHandler.remove(e(this)),e(this).removeClass(j+" "+p)}),tt(_t),_t.find(k+", "+D+", "+P).each(function(){e(this).replaceWith(this.childNodes)}),Ot.scrollTop(0);var t=[y,H,N];e.each(t,function(t,n){e("."+n).removeClass(n)})}function Ht(e,t,n){a[e]=t,"internal"!==n&&(on[e]=t)}function zt(){return e("html").hasClass(h)?void Ft("error","Fullpage.js can only be initialized once and you are doing it multiple times!"):(a.continuousVertical&&(a.loopTop||a.loopBottom)&&(a.continuousVertical=!1,Ft("warn","Option `loopTop/loopBottom` is mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),a.scrollBar&&a.scrollOverflow&&Ft("warn","Option `scrollBar` is mutually exclusive with `scrollOverflow`. Sections with scrollOverflow might not work well in Firefox"),a.continuousVertical&&a.scrollBar&&(a.continuousVertical=!1,Ft("warn","Option `scrollBar` is mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),void e.each(a.anchors,function(t,n){var i=ne.find("[name]").filter(function(){return e(this).attr("name")&&e(this).attr("name").toLowerCase()==n.toLowerCase()}),s=ne.find("[id]").filter(function(){return e(this).attr("id")&&e(this).attr("id").toLowerCase()==n.toLowerCase()});(s.length||i.length)&&(Ft("error","data-anchor tags can not have the same value as any `id` element on the site (or `name` element for IE)."),s.length&&Ft("error",'"'+n+'" is is being used by another element `id` property'),i.length&&Ft("error",'"'+n+'" is is being used by another element `name` property'))}))}function Ft(e,t){console&&console[e]&&console[e]("fullPage: "+t)}if(e("html").hasClass(h))return void zt();var Ot=e("html, body"),Pt=e("body"),Nt=e.fn.fullpage;a=e.extend({menu:!1,anchors:[],lockAnchors:!1,navigation:!1,navigationPosition:"right",navigationTooltips:[],showActiveTooltip:!1,slidesNavigation:!1,slidesNavPosition:"bottom",scrollBar:!1,hybrid:!1,css3:!0,scrollingSpeed:700,autoScrolling:!0,fitToSection:!0,fitToSectionDelay:1e3,easing:"easeInOutCubic",easingcss3:"ease",loopBottom:!1,loopTop:!1,loopHorizontal:!0,continuousVertical:!1,normalScrollElements:null,scrollOverflow:!1,scrollOverflowHandler:se,scrollOverflowOptions:null,touchSensitivity:5,normalScrollElementTouchThreshold:5,bigSectionsDestination:null,keyboardScrolling:!0,animateAnchor:!0,recordHistory:!0,controlArrows:!0,controlArrowColor:"#fff",verticalCentered:!0,sectionsColor:[],paddingTop:0,paddingBottom:0,fixedElements:null,responsive:0,responsiveWidth:0,responsiveHeight:0,sectionSelector:b,slideSelector:B,afterLoad:null,onLeave:null,afterRender:null,afterResize:null,afterReBuild:null,afterSlideLoad:null,onSlideLeave:null},a);var Dt,jt,Vt,$t=!1,Ut=navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/),Wt="ontouchstart"in t||navigator.msMaxTouchPoints>0||navigator.maxTouchPoints,_t=e(this),Yt=te.height(),Xt=!1,Zt=!0,Kt=!0,Gt=[],Qt={};Qt.m={up:!0,down:!0,left:!0,right:!0},Qt.k=e.extend(!0,{},Qt.m);var Jt,en,tn,nn,sn,rn,on=e.extend(!0,{},a);zt(),ie.click=Wt,ie=e.extend(ie,a.scrollOverflowOptions),e.extend(e.easing,{easeInOutCubic:function(e,t,n,i,s){return(t/=s/2)<1?i/2*t*t*t+n:i/2*((t-=2)*t*t+2)+n}}),Nt.setAutoScrolling=function(t,n){Ht("autoScrolling",t,n);var i=e(S);a.autoScrolling&&!a.scrollBar?(Ot.css({overflow:"hidden",height:"100%"}),Nt.setRecordHistory(on.recordHistory,"internal"),_t.css({"-ms-touch-action":"none","touch-action":"none"}),i.length&&Mt(i.position().top)):(Ot.css({overflow:"visible",height:"initial"}),Nt.setRecordHistory(!1,"internal"),_t.css({"-ms-touch-action":"","touch-action":""}),Mt(0),i.length&&Ot.scrollTop(i.position().top))},Nt.setRecordHistory=function(e,t){Ht("recordHistory",e,t)},Nt.setScrollingSpeed=function(e,t){Ht("scrollingSpeed",e,t)},Nt.setFitToSection=function(e,t){Ht("fitToSection",e,t)},Nt.setLockAnchors=function(e){a.lockAnchors=e},Nt.setMouseWheelScrolling=function(e){e?(xt(),Ct()):(St(),Tt())},Nt.setAllowScrolling=function(t,n){"undefined"!=typeof n?(n=n.replace(/ /g,"").split(","),e.each(n,function(e,n){qt(t,n,"m")})):t?(Nt.setMouseWheelScrolling(!0),kt()):(Nt.setMouseWheelScrolling(!1),Lt())},Nt.setKeyboardScrolling=function(t,n){"undefined"!=typeof n?(n=n.replace(/ /g,"").split(","),e.each(n,function(e,n){qt(t,n,"k")})):a.keyboardScrolling=t},Nt.moveSectionUp=function(){var t=e(S).prev(w);t.length||!a.loopTop&&!a.continuousVertical||(t=e(w).last()),t.length&&Ee(t,null,!0)},Nt.moveSectionDown=function(){var t=e(S).next(w);t.length||!a.loopBottom&&!a.continuousVertical||(t=e(w).first()),t.length&&Ee(t,null,!1)},Nt.silentMoveTo=function(e,t){Nt.setScrollingSpeed(0,"internal"),Nt.moveTo(e,t),Nt.setScrollingSpeed(on.scrollingSpeed,"internal")},Nt.moveTo=function(e,t){var n=ut(e);"undefined"!=typeof t?ft(e,t):n.length>0&&Ee(n)},Nt.moveSlideRight=function(e){ke("next",e)},Nt.moveSlideLeft=function(e){ke("prev",e)},Nt.reBuild=function(t){if(!_t.hasClass(u)){Xt=!0,Yt=te.height(),e(w).each(function(){var t=e(this).find(P),n=e(this).find(z);a.verticalCentered&&e(this).find(k).css("height",ct(e(this))+"px"),e(this).css("height",Yt+"px"),a.scrollOverflow&&(n.length?n.each(function(){at(e(this))}):at(e(this))),n.length>1&&Ge(t,t.find(F))});var n=e(S),i=n.index(w);i&&Nt.silentMoveTo(i+1),Xt=!1,e.isFunction(a.afterResize)&&t&&a.afterResize.call(_t),e.isFunction(a.afterReBuild)&&!t&&a.afterReBuild.call(_t)}},Nt.setResponsive=function(t){var n=Pt.hasClass(c);t?n||(Nt.setAutoScrolling(!1,"internal"),Nt.setFitToSection(!1,"internal"),e(R).hide(),Pt.addClass(c)):n&&(Nt.setAutoScrolling(on.autoScrolling,"internal"),Nt.setFitToSection(on.autoScrolling,"internal"),e(R).show(),Pt.removeClass(c))},e(this).length&&(l(),W());var an=!1,ln=0,cn=0,dn=0,un=0,hn=0,fn=(new Date).getTime(),pn=0,mn=0,gn=Yt;Nt.destroy=function(t){Nt.setAutoScrolling(!1,"internal"),Nt.setAllowScrolling(!1),Nt.setKeyboardScrolling(!1),_t.addClass(u),clearTimeout(tn),clearTimeout(en),clearTimeout(Jt),clearTimeout(nn),clearTimeout(sn),te.off("scroll",me).off("hashchange",Ne).off("resize",Qe),ne.off("click",R+" a").off("mouseenter",R+" li").off("mouseleave",R+" li").off("click",U).off("mouseover",a.normalScrollElements).off("mouseout",a.normalScrollElements),e(w).off("click",_),clearTimeout(tn),clearTimeout(en),t&&Bt()}},"undefined"!=typeof IScroll&&(IScroll.prototype.wheelOn=function(){this.wrapper.addEventListener("wheel",this),this.wrapper.addEventListener("mousewheel",this),this.wrapper.addEventListener("DOMMouseScroll",this)},IScroll.prototype.wheelOff=function(){this.wrapper.removeEventListener("wheel",this),this.wrapper.removeEventListener("mousewheel",this),this.wrapper.removeEventListener("DOMMouseScroll",this)});var se={refreshId:null,iScrollInstances:[],onLeave:function(){var t=e(S).find(l).data("iscrollInstance");"undefined"!=typeof t&&t&&t.wheelOff()},afterLoad:function(){var t=e(S).find(l).data("iscrollInstance");"undefined"!=typeof t&&t&&t.wheelOn()},create:function(t,n){var i=t.find(l);i.height(n),i.each(function(){var t=jQuery(this),n=t.data("iscrollInstance");n&&e.each(se.iScrollInstances,function(){e(this).destroy()}),n=new IScroll(t.get(0),ie),se.iScrollInstances.push(n),t.data("iscrollInstance",n)})},isScrolled:function(e,t){var n=t.data("iscrollInstance");return!n||("top"===e?n.y>=0&&!t.scrollTop():"bottom"===e?0-n.y+t.scrollTop()+1+t.innerHeight()>=t[0].scrollHeight:void 0)},scrollable:function(e){return e.find(P).length?e.find(F).find(l):e.find(l)},scrollHeight:function(e){return e.find(l).children().first().get(0).scrollHeight},remove:function(e){var t=e.find(l);if(t.length){var n=t.data("iscrollInstance");n.destroy(),t.data("iscrollInstance",null)}e.find(l).children().first().children().first().unwrap().unwrap()},update:function(t,n){clearTimeout(se.refreshId),se.refreshId=setTimeout(function(){e.each(se.iScrollInstances,function(){e(this).get(0).refresh()})},150),t.find(l).css("height",n+"px").parent().css("height",n+"px")},wrapContent:function(){return'<div class="'+a+'"><div class="fp-scroller"></div></div>'}}}),function(e){e("head").append('<style type="text/css">.sn-pxg .pxg-set{user-select:none;-moz-user-select:none;-webkit-user-select:none;}.sn-pxg span.pxg-source{position:relative;display:inline-block;z-index:2;}.sn-pxg U.pxg-set,.sn-pxg U.pxg-set S,.sn-pxg U.pxg-set S B{left:0;right:0;top:0;bottom:0;height:inherit;width:inherit;position:absolute;display:inline-block;text-decoration:none;font-weight:inherit;}.sn-pxg U.pxg-set S{overflow:hidden;}.sn-pxg U.pxg-set{text-decoration:none;z-index:1;display:inline-block;position:relative;}</style>'),e.fn.pxgradient=function(t){function n(e){return"#"==e.substr(0,1)&&(e=e.substr(1)),3==e.length&&(e=e.substr(0,1)+e.substr(0,1)+e.substr(1,1)+e.substr(1,1)+e.substr(2,1)+e.substr(2,1)),[parseInt(e.substr(0,2),16),parseInt(e.substr(2,2),16),parseInt(e.substr(4,2),16)]}function i(e){var t="0123456789abcdef";return"#"+t.charAt(parseInt(e[0]/16))+t.charAt(e[0]%16)+t.charAt(parseInt(e[1]/16))+t.charAt(e[1]%16)+t.charAt(parseInt(e[2]/16))+t.charAt(e[2]%16)}function s(e,n){for(var i=e>0?e/n:0,s=0;s<t.colors.length;s++){if(fStopPosition=s/(t.colors.length-1),fLastPosition=s>0?(s-1)/(t.colors.length-1):0,i==fStopPosition)return t.colors[s];if(i<fStopPosition)return fCurrentStop=(i-fLastPosition)/(fStopPosition-fLastPosition),r(t.RGBcolors[s-1],t.RGBcolors[s],fCurrentStop)}return t.colors[t.colors.length-1]}function r(e,t,n){for(var s=[],r=0;r<3;r++)s[r]=e[r]+Math.round((t[r]-e[r])*n);return i(s)}var t=e.extend({step:10,colors:["#ffcc00","#cc0000","#000000"],dir:"y"},t);t.RGBcolors=[];for(var o=0;o<t.colors.length;o++)t.RGBcolors[o]=n(t.colors[o]);return this.each(function(n,i){var r=e(i);if(!r.hasClass("sn-pxg")){var o=r.html();r.html('<span class="pxg-source" style="visibility: hidden;">'+o+"</span>").append('<u class="pxg-set"></u>');var a=r.find(".pxg-set"),l=r.find(".pxg-source"),c=l.innerWidth(),d=l.innerHeight();if(l.hide(),r.addClass("sn-pxg"),"x"==t.dir)var u=c;else if("y"==t.dir)var u=d;var h=Math.floor(u/t.step),f=h,p=u-h*t.step;p>0&&f++,a.css({width:c,height:d});var m=0,g="";if("x"==t.dir)for(var n=0;n<f;n++){var v=s(m,u);g+='<s style="height:'+d+"px;width:"+t.step+"px;left:"+m+"px;color:"+v+'"><b style="left:-'+m+"px;width:"+c+"px;height:"+d+'px;">'+o+"</b></s>",m+=t.step}else if("y"==t.dir)for(var n=0;n<f;n++){var v=s(m,u);g+='<s style="width:'+c+"px;height:"+t.step+"px;top:"+m+"px;color:"+v+'"><b style="top:-'+m+"px;height:"+c+"px;height:"+d+'px;">'+o+"</b></s>",m+=t.step}a.append(g)}})}}(jQuery),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof module&&module.exports?module.exports=e(require("jquery")):e(jQuery)}(function(e){e.extend(e.fn,{validate:function(t){if(!this.length)return void(t&&t.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing."));var n=e.data(this[0],"validator");return n?n:(this.attr("novalidate","novalidate"),n=new e.validator(t,this[0]),e.data(this[0],"validator",n),n.settings.onsubmit&&(this.on("click.validate",":submit",function(t){n.settings.submitHandler&&(n.submitButton=t.target),e(this).hasClass("cancel")&&(n.cancelSubmit=!0),void 0!==e(this).attr("formnovalidate")&&(n.cancelSubmit=!0)}),
this.on("submit.validate",function(t){function i(){var i,s;return!n.settings.submitHandler||(n.submitButton&&(i=e("<input type='hidden'/>").attr("name",n.submitButton.name).val(e(n.submitButton).val()).appendTo(n.currentForm)),s=n.settings.submitHandler.call(n,n.currentForm,t),n.submitButton&&i.remove(),void 0!==s&&s)}return n.settings.debug&&t.preventDefault(),n.cancelSubmit?(n.cancelSubmit=!1,i()):n.form()?n.pendingRequest?(n.formSubmitted=!0,!1):i():(n.focusInvalid(),!1)})),n)},valid:function(){var t,n,i;return e(this[0]).is("form")?t=this.validate().form():(i=[],t=!0,n=e(this[0].form).validate(),this.each(function(){t=n.element(this)&&t,t||(i=i.concat(n.errorList))}),n.errorList=i),t},rules:function(t,n){if(this.length){var i,s,r,o,a,l,c=this[0];if(t)switch(i=e.data(c.form,"validator").settings,s=i.rules,r=e.validator.staticRules(c),t){case"add":e.extend(r,e.validator.normalizeRule(n)),delete r.messages,s[c.name]=r,n.messages&&(i.messages[c.name]=e.extend(i.messages[c.name],n.messages));break;case"remove":return n?(l={},e.each(n.split(/\s/),function(t,n){l[n]=r[n],delete r[n],"required"===n&&e(c).removeAttr("aria-required")}),l):(delete s[c.name],r)}return o=e.validator.normalizeRules(e.extend({},e.validator.classRules(c),e.validator.attributeRules(c),e.validator.dataRules(c),e.validator.staticRules(c)),c),o.required&&(a=o.required,delete o.required,o=e.extend({required:a},o),e(c).attr("aria-required","true")),o.remote&&(a=o.remote,delete o.remote,o=e.extend(o,{remote:a})),o}}}),e.extend(e.expr[":"],{blank:function(t){return!e.trim(""+e(t).val())},filled:function(t){var n=e(t).val();return null!==n&&!!e.trim(""+n)},unchecked:function(t){return!e(t).prop("checked")}}),e.validator=function(t,n){this.settings=e.extend(!0,{},e.validator.defaults,t),this.currentForm=n,this.init()},e.validator.format=function(t,n){return 1===arguments.length?function(){var n=e.makeArray(arguments);return n.unshift(t),e.validator.format.apply(this,n)}:void 0===n?t:(arguments.length>2&&n.constructor!==Array&&(n=e.makeArray(arguments).slice(1)),n.constructor!==Array&&(n=[n]),e.each(n,function(e,n){t=t.replace(new RegExp("\\{"+e+"\\}","g"),function(){return n})}),t)},e.extend(e.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",pendingClass:"pending",validClass:"valid",errorElement:"label",focusCleanup:!1,focusInvalid:!0,errorContainer:e([]),errorLabelContainer:e([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(e){this.lastActive=e,this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,e,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(e)))},onfocusout:function(e){this.checkable(e)||!(e.name in this.submitted)&&this.optional(e)||this.element(e)},onkeyup:function(t,n){var i=[16,17,18,20,35,36,37,38,39,40,45,144,225];9===n.which&&""===this.elementValue(t)||e.inArray(n.keyCode,i)!==-1||(t.name in this.submitted||t.name in this.invalid)&&this.element(t)},onclick:function(e){e.name in this.submitted?this.element(e):e.parentNode.name in this.submitted&&this.element(e.parentNode)},highlight:function(t,n,i){"radio"===t.type?this.findByName(t.name).addClass(n).removeClass(i):e(t).addClass(n).removeClass(i)},unhighlight:function(t,n,i){"radio"===t.type?this.findByName(t.name).removeClass(n).addClass(i):e(t).removeClass(n).addClass(i)}},setDefaults:function(t){e.extend(e.validator.defaults,t)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date ( ISO ).",number:"Please enter a valid number.",digits:"Please enter only digits.",equalTo:"Please enter the same value again.",maxlength:e.validator.format("Please enter no more than {0} characters."),minlength:e.validator.format("Please enter at least {0} characters."),rangelength:e.validator.format("Please enter a value between {0} and {1} characters long."),range:e.validator.format("Please enter a value between {0} and {1}."),max:e.validator.format("Please enter a value less than or equal to {0}."),min:e.validator.format("Please enter a value greater than or equal to {0}."),step:e.validator.format("Please enter a multiple of {0}.")},autoCreateRanges:!1,prototype:{init:function(){function t(t){var n=e.data(this.form,"validator"),i="on"+t.type.replace(/^validate/,""),s=n.settings;s[i]&&!e(this).is(s.ignore)&&s[i].call(n,this,t)}this.labelContainer=e(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||e(this.currentForm),this.containers=e(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var n,i=this.groups={};e.each(this.settings.groups,function(t,n){"string"==typeof n&&(n=n.split(/\s/)),e.each(n,function(e,n){i[n]=t})}),n=this.settings.rules,e.each(n,function(t,i){n[t]=e.validator.normalizeRule(i)}),e(this.currentForm).on("focusin.validate focusout.validate keyup.validate",":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable]",t).on("click.validate","select, option, [type='radio'], [type='checkbox']",t),this.settings.invalidHandler&&e(this.currentForm).on("invalid-form.validate",this.settings.invalidHandler),e(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required","true")},form:function(){return this.checkForm(),e.extend(this.submitted,this.errorMap),this.invalid=e.extend({},this.errorMap),this.valid()||e(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var e=0,t=this.currentElements=this.elements();t[e];e++)this.check(t[e]);return this.valid()},element:function(t){var n,i,s=this.clean(t),r=this.validationTargetFor(s),o=this,a=!0;return void 0===r?delete this.invalid[s.name]:(this.prepareElement(r),this.currentElements=e(r),i=this.groups[r.name],i&&e.each(this.groups,function(e,t){t===i&&e!==r.name&&(s=o.validationTargetFor(o.clean(o.findByName(e))),s&&s.name in o.invalid&&(o.currentElements.push(s),a=a&&o.check(s)))}),n=this.check(r)!==!1,a=a&&n,n?this.invalid[r.name]=!1:this.invalid[r.name]=!0,this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),e(t).attr("aria-invalid",!n)),a},showErrors:function(t){if(t){var n=this;e.extend(this.errorMap,t),this.errorList=e.map(this.errorMap,function(e,t){return{message:e,element:n.findByName(t)[0]}}),this.successList=e.grep(this.successList,function(e){return!(e.name in t)})}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){e.fn.resetForm&&e(this.currentForm).resetForm(),this.invalid={},this.submitted={},this.prepareForm(),this.hideErrors();var t=this.elements().removeData("previousValue").removeAttr("aria-invalid");this.resetElements(t)},resetElements:function(e){var t;if(this.settings.unhighlight)for(t=0;e[t];t++)this.settings.unhighlight.call(this,e[t],this.settings.errorClass,""),this.findByName(e[t].name).removeClass(this.settings.validClass);else e.removeClass(this.settings.errorClass).removeClass(this.settings.validClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(e){var t,n=0;for(t in e)e[t]&&n++;return n},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(e){e.not(this.containers).text(""),this.addWrapper(e).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{e(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").focus().trigger("focusin")}catch(t){}},findLastActive:function(){var t=this.lastActive;return t&&1===e.grep(this.errorList,function(e){return e.element.name===t.name}).length&&t},elements:function(){var t=this,n={};return e(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function(){var i=this.name||e(this).attr("name");return!i&&t.settings.debug&&window.console&&console.error("%o has no name assigned",this),this.hasAttribute("contenteditable")&&(this.form=e(this).closest("form")[0]),!(i in n||!t.objectLength(e(this).rules()))&&(n[i]=!0,!0)})},clean:function(t){return e(t)[0]},errors:function(){var t=this.settings.errorClass.split(" ").join(".");return e(this.settings.errorElement+"."+t,this.errorContext)},resetInternals:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=e([]),this.toHide=e([])},reset:function(){this.resetInternals(),this.currentElements=e([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(e){this.reset(),this.toHide=this.errorsFor(e)},elementValue:function(t){var n,i,s=e(t),r=t.type;return"radio"===r||"checkbox"===r?this.findByName(t.name).filter(":checked").val():"number"===r&&"undefined"!=typeof t.validity?t.validity.badInput?"NaN":s.val():(n=t.hasAttribute("contenteditable")?s.text():s.val(),"file"===r?"C:\\fakepath\\"===n.substr(0,12)?n.substr(12):(i=n.lastIndexOf("/"),i>=0?n.substr(i+1):(i=n.lastIndexOf("\\"),i>=0?n.substr(i+1):n)):"string"==typeof n?n.replace(/\r/g,""):n)},check:function(t){t=this.validationTargetFor(this.clean(t));var n,i,s,r=e(t).rules(),o=e.map(r,function(e,t){return t}).length,a=!1,l=this.elementValue(t);if("function"==typeof r.normalizer){if(l=r.normalizer.call(t,l),"string"!=typeof l)throw new TypeError("The normalizer should return a string value.");delete r.normalizer}for(i in r){s={method:i,parameters:r[i]};try{if(n=e.validator.methods[i].call(this,l,t,s.parameters),"dependency-mismatch"===n&&1===o){a=!0;continue}if(a=!1,"pending"===n)return void(this.toHide=this.toHide.not(this.errorsFor(t)));if(!n)return this.formatAndAdd(t,s),!1}catch(c){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+t.id+", check the '"+s.method+"' method.",c),c instanceof TypeError&&(c.message+=".  Exception occurred when checking element "+t.id+", check the '"+s.method+"' method."),c}}if(!a)return this.objectLength(r)&&this.successList.push(t),!0},customDataMessage:function(t,n){return e(t).data("msg"+n.charAt(0).toUpperCase()+n.substring(1).toLowerCase())||e(t).data("msg")},customMessage:function(e,t){var n=this.settings.messages[e];return n&&(n.constructor===String?n:n[t])},findDefined:function(){for(var e=0;e<arguments.length;e++)if(void 0!==arguments[e])return arguments[e]},defaultMessage:function(t,n){var i=this.findDefined(this.customMessage(t.name,n.method),this.customDataMessage(t,n.method),!this.settings.ignoreTitle&&t.title||void 0,e.validator.messages[n.method],"<strong>Warning: No message defined for "+t.name+"</strong>"),s=/\$?\{(\d+)\}/g;return"function"==typeof i?i=i.call(this,n.parameters,t):s.test(i)&&(i=e.validator.format(i.replace(s,"{$1}"),n.parameters)),i},formatAndAdd:function(e,t){var n=this.defaultMessage(e,t);this.errorList.push({message:n,element:e,method:t.method}),this.errorMap[e.name]=n,this.submitted[e.name]=n},addWrapper:function(e){return this.settings.wrapper&&(e=e.add(e.parent(this.settings.wrapper))),e},defaultShowErrors:function(){var e,t,n;for(e=0;this.errorList[e];e++)n=this.errorList[e],this.settings.highlight&&this.settings.highlight.call(this,n.element,this.settings.errorClass,this.settings.validClass),this.showLabel(n.element,n.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(e=0;this.successList[e];e++)this.showLabel(this.successList[e]);if(this.settings.unhighlight)for(e=0,t=this.validElements();t[e];e++)this.settings.unhighlight.call(this,t[e],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return e(this.errorList).map(function(){return this.element})},showLabel:function(t,n){var i,s,r,o,a=this.errorsFor(t),l=this.idOrName(t),c=e(t).attr("aria-describedby");a.length?(a.removeClass(this.settings.validClass).addClass(this.settings.errorClass),a.html(n)):(a=e("<"+this.settings.errorElement+">").attr("id",l+"-error").addClass(this.settings.errorClass).html(n||""),i=a,this.settings.wrapper&&(i=a.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(i):this.settings.errorPlacement?this.settings.errorPlacement(i,e(t)):i.insertAfter(t),a.is("label")?a.attr("for",l):0===a.parents("label[for='"+this.escapeCssMeta(l)+"']").length&&(r=a.attr("id"),c?c.match(new RegExp("\\b"+this.escapeCssMeta(r)+"\\b"))||(c+=" "+r):c=r,e(t).attr("aria-describedby",c),s=this.groups[t.name],s&&(o=this,e.each(o.groups,function(t,n){n===s&&e("[name='"+o.escapeCssMeta(t)+"']",o.currentForm).attr("aria-describedby",a.attr("id"))})))),!n&&this.settings.success&&(a.text(""),"string"==typeof this.settings.success?a.addClass(this.settings.success):this.settings.success(a,t)),this.toShow=this.toShow.add(a)},errorsFor:function(t){var n=this.escapeCssMeta(this.idOrName(t)),i=e(t).attr("aria-describedby"),s="label[for='"+n+"'], label[for='"+n+"'] *";return i&&(s=s+", #"+this.escapeCssMeta(i).replace(/\s+/g,", #")),this.errors().filter(s)},escapeCssMeta:function(e){return e.replace(/([\\!"#$%&'()*+,.\/:;<=>?@\[\]^`{|}~])/g,"\\$1")},idOrName:function(e){return this.groups[e.name]||(this.checkable(e)?e.name:e.id||e.name)},validationTargetFor:function(t){return this.checkable(t)&&(t=this.findByName(t.name)),e(t).not(this.settings.ignore)[0]},checkable:function(e){return/radio|checkbox/i.test(e.type)},findByName:function(t){return e(this.currentForm).find("[name='"+this.escapeCssMeta(t)+"']")},getLength:function(t,n){switch(n.nodeName.toLowerCase()){case"select":return e("option:selected",n).length;case"input":if(this.checkable(n))return this.findByName(n.name).filter(":checked").length}return t.length},depend:function(e,t){return!this.dependTypes[typeof e]||this.dependTypes[typeof e](e,t)},dependTypes:{"boolean":function(e){return e},string:function(t,n){return!!e(t,n.form).length},"function":function(e,t){return e(t)}},optional:function(t){var n=this.elementValue(t);return!e.validator.methods.required.call(this,n,t)&&"dependency-mismatch"},startRequest:function(t){this.pending[t.name]||(this.pendingRequest++,e(t).addClass(this.settings.pendingClass),this.pending[t.name]=!0)},stopRequest:function(t,n){this.pendingRequest--,this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[t.name],e(t).removeClass(this.settings.pendingClass),n&&0===this.pendingRequest&&this.formSubmitted&&this.form()?(e(this.currentForm).submit(),this.formSubmitted=!1):!n&&0===this.pendingRequest&&this.formSubmitted&&(e(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(t,n){return e.data(t,"previousValue")||e.data(t,"previousValue",{old:null,valid:!0,message:this.defaultMessage(t,{method:n})})},destroy:function(){this.resetForm(),e(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur")}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(t,n){t.constructor===String?this.classRuleSettings[t]=n:e.extend(this.classRuleSettings,t)},classRules:function(t){var n={},i=e(t).attr("class");return i&&e.each(i.split(" "),function(){this in e.validator.classRuleSettings&&e.extend(n,e.validator.classRuleSettings[this])}),n},normalizeAttributeRule:function(e,t,n,i){/min|max|step/.test(n)&&(null===t||/number|range|text/.test(t))&&(i=Number(i),isNaN(i)&&(i=void 0)),i||0===i?e[n]=i:t===n&&"range"!==t&&(e[n]=!0)},attributeRules:function(t){var n,i,s={},r=e(t),o=t.getAttribute("type");for(n in e.validator.methods)"required"===n?(i=t.getAttribute(n),""===i&&(i=!0),i=!!i):i=r.attr(n),this.normalizeAttributeRule(s,o,n,i);return s.maxlength&&/-1|2147483647|524288/.test(s.maxlength)&&delete s.maxlength,s},dataRules:function(t){var n,i,s={},r=e(t),o=t.getAttribute("type");for(n in e.validator.methods)i=r.data("rule"+n.charAt(0).toUpperCase()+n.substring(1).toLowerCase()),this.normalizeAttributeRule(s,o,n,i);return s},staticRules:function(t){var n={},i=e.data(t.form,"validator");return i.settings.rules&&(n=e.validator.normalizeRule(i.settings.rules[t.name])||{}),n},normalizeRules:function(t,n){return e.each(t,function(i,s){if(s===!1)return void delete t[i];if(s.param||s.depends){var r=!0;switch(typeof s.depends){case"string":r=!!e(s.depends,n.form).length;break;case"function":r=s.depends.call(n,n)}r?t[i]=void 0===s.param||s.param:(e.data(n.form,"validator").resetElements(e(n)),delete t[i])}}),e.each(t,function(i,s){t[i]=e.isFunction(s)&&"normalizer"!==i?s(n):s}),e.each(["minlength","maxlength"],function(){t[this]&&(t[this]=Number(t[this]))}),e.each(["rangelength","range"],function(){var n;t[this]&&(e.isArray(t[this])?t[this]=[Number(t[this][0]),Number(t[this][1])]:"string"==typeof t[this]&&(n=t[this].replace(/[\[\]]/g,"").split(/[\s,]+/),t[this]=[Number(n[0]),Number(n[1])]))}),e.validator.autoCreateRanges&&(null!=t.min&&null!=t.max&&(t.range=[t.min,t.max],delete t.min,delete t.max),null!=t.minlength&&null!=t.maxlength&&(t.rangelength=[t.minlength,t.maxlength],delete t.minlength,delete t.maxlength)),t},normalizeRule:function(t){if("string"==typeof t){var n={};e.each(t.split(/\s/),function(){n[this]=!0}),t=n}return t},addMethod:function(t,n,i){e.validator.methods[t]=n,e.validator.messages[t]=void 0!==i?i:e.validator.messages[t],n.length<3&&e.validator.addClassRules(t,e.validator.normalizeRule(t))},methods:{required:function(t,n,i){if(!this.depend(i,n))return"dependency-mismatch";if("select"===n.nodeName.toLowerCase()){var s=e(n).val();return s&&s.length>0}return this.checkable(n)?this.getLength(t,n)>0:t.length>0},email:function(e,t){return this.optional(t)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(e)},url:function(e,t){return this.optional(t)||/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[\/?#]\S*)?$/i.test(e)},date:function(e,t){return this.optional(t)||!/Invalid|NaN/.test(new Date(e).toString())},dateISO:function(e,t){return this.optional(t)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(e)},number:function(e,t){return this.optional(t)||/^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(e)},digits:function(e,t){return this.optional(t)||/^\d+$/.test(e)},minlength:function(t,n,i){var s=e.isArray(t)?t.length:this.getLength(t,n);return this.optional(n)||s>=i},maxlength:function(t,n,i){var s=e.isArray(t)?t.length:this.getLength(t,n);return this.optional(n)||s<=i},rangelength:function(t,n,i){var s=e.isArray(t)?t.length:this.getLength(t,n);return this.optional(n)||s>=i[0]&&s<=i[1]},min:function(e,t,n){return this.optional(t)||e>=n},max:function(e,t,n){return this.optional(t)||e<=n},range:function(e,t,n){return this.optional(t)||e>=n[0]&&e<=n[1]},step:function(t,n,i){var s=e(n).attr("type"),r="Step attribute on input type "+s+" is not supported.",o=["text","number","range"],a=new RegExp("\\b"+s+"\\b"),l=s&&!a.test(o.join());if(l)throw new Error(r);return this.optional(n)||t%i===0},equalTo:function(t,n,i){var s=e(i);return this.settings.onfocusout&&s.not(".validate-equalTo-blur").length&&s.addClass("validate-equalTo-blur").on("blur.validate-equalTo",function(){e(n).valid()}),t===s.val()},remote:function(t,n,i,s){if(this.optional(n))return"dependency-mismatch";s="string"==typeof s&&s||"remote";var r,o,a,l=this.previousValue(n,s);return this.settings.messages[n.name]||(this.settings.messages[n.name]={}),l.originalMessage=l.originalMessage||this.settings.messages[n.name][s],this.settings.messages[n.name][s]=l.message,i="string"==typeof i&&{url:i}||i,a=e.param(e.extend({data:t},i.data)),l.old===a?l.valid:(l.old=a,r=this,this.startRequest(n),o={},o[n.name]=t,e.ajax(e.extend(!0,{mode:"abort",port:"validate"+n.name,dataType:"json",data:o,context:r.currentForm,success:function(e){var i,o,a,c=e===!0||"true"===e;r.settings.messages[n.name][s]=l.originalMessage,c?(a=r.formSubmitted,r.resetInternals(),r.toHide=r.errorsFor(n),r.formSubmitted=a,r.successList.push(n),r.invalid[n.name]=!1,r.showErrors()):(i={},o=e||r.defaultMessage(n,{method:s,parameters:t}),i[n.name]=l.message=o,r.invalid[n.name]=!0,r.showErrors(i)),l.valid=c,r.stopRequest(n,c)}},i)),"pending")}}});var t,n={};e.ajaxPrefilter?e.ajaxPrefilter(function(e,t,i){var s=e.port;"abort"===e.mode&&(n[s]&&n[s].abort(),n[s]=i)}):(t=e.ajax,e.ajax=function(i){var s=("mode"in i?i:e.ajaxSettings).mode,r=("port"in i?i:e.ajaxSettings).port;return"abort"===s?(n[r]&&n[r].abort(),n[r]=t.apply(this,arguments),n[r]):t.apply(this,arguments)})}),$(document).ready(function(){$("#fullpage").fullpage({anchors:["home","portfolio","contacts"],verticalCentered:!1,responsiveWidth:768,responsiveHeight:750,afterLoad:function(e,t){setActiveClassMenu("menu__"+e)}})}),$("#sendRequest").validate({submitHandler:function(e){e.submit()},messages:{name:{required:"Введите, пожалуйста, свое имя (как минимум 2 символа)"},email:{required:"Укажите, пожалуйста, правильный имейл адрес"}}}),$(".menu a").on("click",function(e){e.preventDefault();var t;switch(t=this.className.split(" "),setActiveClassMenu(t[1]),t[1]){case"menu__home":$.fn.fullpage.moveTo(1);break;case"menu__portfolio":$.fn.fullpage.moveTo(2);break;case"menu__contacts":$.fn.fullpage.moveTo(3);break;default:$.fn.fullpage.moveTo(1)}}),$(".header__link").on("click",function(e){e.preventDefault(),setActiveClassMenu("menu__portfolio"),$.fn.fullpage.moveTo(2)});
//# sourceMappingURL=data:application/json;base64,
